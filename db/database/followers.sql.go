// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: followers.sql

package database

import (
	"context"
)

const followUser = `-- name: FollowUser :one

INSERT INTO user_followers (follower_id, following_id)
VALUES ($2, $1)
ON CONFLICT (following_id, follower_id)
DO NOTHING
RETURNING follower_id, following_id
`

type FollowUserParams struct {
	FollowingID int64
	FollowerID  int64
}

func (q *Queries) FollowUser(ctx context.Context, arg FollowUserParams) (UserFollower, error) {
	row := q.db.QueryRowContext(ctx, followUser, arg.FollowingID, arg.FollowerID)
	var i UserFollower
	err := row.Scan(&i.FollowerID, &i.FollowingID)
	return i, err
}

const unfollowUser = `-- name: UnfollowUser :one

DELETE FROM user_followers
WHERE
    follower_id = $1
    AND following_id = $2
RETURNING follower_id, following_id
`

type UnfollowUserParams struct {
	FollowerID  int64
	FollowingID int64
}

func (q *Queries) UnfollowUser(ctx context.Context, arg UnfollowUserParams) (UserFollower, error) {
	row := q.db.QueryRowContext(ctx, unfollowUser, arg.FollowerID, arg.FollowingID)
	var i UserFollower
	err := row.Scan(&i.FollowerID, &i.FollowingID)
	return i, err
}
